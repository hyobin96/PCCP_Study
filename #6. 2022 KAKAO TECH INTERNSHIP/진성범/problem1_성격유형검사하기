// 풀이 시간 : 20분
// 시간 복잡도 : O(n)
// 코드 설명 : 노가다,,
// 취약한 부분 : 다음에는 좀 더 깔끔하게 풀어볼게요,,

class Solution {
    char[] types;
    int[] typesNum;
    public String solution(String[] survey, int[] choices) {
        String answer = "";
        types = new char[]{'R', 'T', 'C', 'F', 'J', 'M', 'A', 'N'};
        typesNum = new int[8];
        for(int i = 0; i < survey.length; i++) {
            if(choices[i] == 1) {
                check(survey[i].charAt(0), 3);
            } else if(choices[i] == 2) {
                check(survey[i].charAt(0), 2);
            } else if(choices[i] == 3) {
                check(survey[i].charAt(0), 1);
            } else if(choices[i] == 5) {
                check(survey[i].charAt(1), 1);
            } else if(choices[i] == 6) {
                check(survey[i].charAt(1), 2);
            } else if(choices[i] == 7) {
                check(survey[i].charAt(1), 3);
            } 
        }
        
        
        if(typesNum[0] < typesNum[1]) {
            answer += "T";
        } else if(typesNum[1] <= typesNum[0]) {
            answer += "R";
        }
        if(typesNum[2] < typesNum[3]) {
            answer += "F";
        } else if(typesNum[3] <= typesNum[2]) {
            answer += "C";
        }
        if(typesNum[4] < typesNum[5]) {
            answer += "M";
        } else if(typesNum[5] <= typesNum[4]) {
            answer += "J";
        }
        if(typesNum[6] < typesNum[7]) {
            answer += "N";
        } else if(typesNum[7] <= typesNum[6]) {
            answer += "A";
        }
        
        return answer;
    }
    
    void check(char c, int n) {
        for(int i = 0; i < types.length; i++) {
            if(types[i] == c) {
                typesNum[i] += n;
                return;
            }
        }
        return;
    }
}
